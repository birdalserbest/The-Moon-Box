/*
Arduino IDE code developed by Birdal Serbest, Nov 2018.
Controls 10 LEDs and a servo motor to display
to the user the current location of the moon.
Please review the readMe for detailed description of functionality.
*/


#include <ESP8266WiFi.h>         // WiFi connect library
#include <ESP8266HTTPClient.h>   // get request library
#include <Servo.h>               // servo motor control library


const char* ssid = "yourSSID";           //enter your WiFi name
const char* password = "yourPassword";   //enter your WiFi password

// led#       nodeMCU pin
int L1 = 5;     //D-1
int L2 = 4;     //D-2
int L3 = 0;     //D-3
int L4 = 2;     //D-4
int L5 = 14;    //D-5
int L6 = 12;    //D-6
int L7 = 13;    //D-7
int L8 = 15;    //D-8
int L9 = 3;     //D-9
int L10 = 1;    //D-10

Servo myservo;

bool runLoop = true;  //determines whether void Loop() should run
int zeroPos = 5;      //servo position "5" is closes to 0 degrees
int val = 5;          //variable to translate altitude to servo position
float altitude = 0;   //angle of moon above horizon
float azimuth = 0;    //compass direction of moon (0 = North, 180 = South)



void setup()          //setup code runs once
{
  Serial.begin(115200);
  delay(1000);
  Serial.println();
  myservo.write(zeroPos);           //reset servo to zero on every launch

  Serial.print("Wifi connecting to ");
  Serial.println( ssid );

  WiFi.begin(ssid, password);       //connect to wifi

  Serial.println();
  Serial.print("Connecting");

  while ( WiFi.status() != WL_CONNECTED )   //delay continuation until connected to WiFi
  {
    //    digitalWrite( ledPin , HIGH);

    delay(1000);
    //    digitalWrite( ledPin , LOW);
    delay(1000);
    Serial.println("connecting...");
  }

  //  digitalWrite( ledPin , HIGH);
  Serial.println();

  Serial.println("Wifi Connected Success!");
  Serial.print("NodeMCU IP Address : ");
  Serial.println(WiFi.localIP() );

  HTTPClient http;                   //Declare an object of class HTTPClient
  http.begin("http://us-central1-moonapi-221103.cloudfunctions.net/MoonAPI");  //Specify request destination (our Google Cloud)
  http.setTimeout(30000);
  int httpCode = http.GET();         //Send get request
  //    delay(5000);
  int i = 0;
  while (httpCode != 200 && i < 10)  //attempt request 10 times (google cloud servos may take a couple tries before timing out)
  { 
    delay(500);
    Serial.println("Re-trying get request");
    httpCode = http.GET();
    i++;
  }
  if (httpCode > 0)            //Check the returning code
  {
    String payload = http.getString();   //Get the request response payload
    String exception = "e";              //what google cloud will return if moon is below -10 degrees
    if (payload != exception)            //if we have useful values for altitude
    {
      runLoop = true;
      altitude = payload.substring(0, payload.indexOf('\n')).toFloat();                        //extract altitude from payload
      azimuth = payload.substring(payload.indexOf('\n') + 1, payload.length()).toFloat();      //extract azimuth from payload
      delay(50);
      Serial.println("Altitude: " + String(altitude));
      delay(50);
      Serial.println("Azimuth: " + String(azimuth));
    }
    else  //in case google cloud returns the exception
    {
      runLoop = false;
      http.end();         //Close connection
      delay(50);
      WiFi.disconnect();  //Disconnect WiFi
      delay(50);
      Serial.println("Disconnected");
      delay(50);
      Serial.println("Moon is below horizon");


    }
    //      Serial.println(payload);        //Print the response payload (used only during testing)
  }
  http.end();          //Close connection
  delay(50);
  WiFi.disconnect();   //Disconnect WiFi
  delay(50);
  Serial.println("Disconnected");
  delay(50);

  myservo.attach(16);    //D0 pin on nodeMCU
  myservo.write(zeroPos);

  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(L1, OUTPUT);
  pinMode(L2, OUTPUT);
  pinMode(L3, OUTPUT);
  pinMode(L4, OUTPUT);
  pinMode(L5, OUTPUT);
  pinMode(L6, OUTPUT);
  pinMode(L7, OUTPUT);
  pinMode(L8, OUTPUT);
  pinMode(L9, OUTPUT);
  pinMode(L10, OUTPUT);

  allOFF();
}

void loop() {
  if (runLoop == true)
  {
    allOFF();
    myservo.write(zeroPos);

    blinkAll();     //just to look cool begin
    blinkAll();
    blinkAll();
    roundRobin();
    roundRobin();
    roundRobin();   //just to look cool end
    displayDirection(azimuth);      //show us the compass direction
    
    // we do this bit below because the servo positions do not match perfectly with angle inputs
    // thus we adjust the input value to the servo based desired angle 
    // higher angle = larger adjustment, we learned this from trial and error testing
    
    if (altitude > 5)          // servo does not move if altitude is below 5 degrees
    {
      if (altitude >= 85 )
      {
        val = altitude + 20;
      }
      else if ( altitude >= 65)
      {
        val = altitude + 15;
      }
      else if ( altitude >= 40 )
      {
        val = altitude + 10;
      }
      else
      {
        val = altitude;
      }
      for (int i = 0; i <= val; i++)           //servo goes up
      {
        myservo.write(i);
        delay(3);
      }
      delay(15000);                            //servo waits 15 seconds
      for (int j = val; j >= zeroPos; j--)     //servo goes down
      {
        myservo.write(j);
        delay(3);
      }

      delay(3000);    //in case user wants to power off before servo goes back up, we give a 3 second delay
      allOFF();
    }
    else
    {
      while (0 == 0)
      {
        displayDirection(azimuth);     //in case altitude is below 5 degrees, we only display compass direction
      }
    }
  }
  else
  {
  allRIP();   //when altitude is below -10 degrees, we run this indicator
  }
}




//functions that we call


void allOFF()           //turn off all LEDs
{
  digitalWrite(L1, LOW);
  digitalWrite(L2, LOW);
  digitalWrite(L3, LOW);
  digitalWrite(L4, LOW);
  digitalWrite(L5, LOW);
  digitalWrite(L6, LOW);
  digitalWrite(L7, LOW);
  digitalWrite(L8, LOW);
  digitalWrite(L9, LOW);
  digitalWrite(L10, LOW);
}


void allON()           //turn on all LEDs
{
  digitalWrite(L1, HIGH);
  digitalWrite(L2, HIGH);
  digitalWrite(L3, HIGH);
  digitalWrite(L4, HIGH);
  digitalWrite(L5, HIGH);
  digitalWrite(L6, HIGH);
  digitalWrite(L7, HIGH);
  digitalWrite(L8, HIGH);
  digitalWrite(L9, HIGH);
  digitalWrite(L10, HIGH);
}

void allRIP()           //turn on every second LED (used to indicate moon altitude is below -10 degrees)
{
  digitalWrite(L1, HIGH);
  digitalWrite(L2, LOW);
  digitalWrite(L3, HIGH);
  digitalWrite(L4, LOW);
  digitalWrite(L5, HIGH);
  digitalWrite(L6, LOW);
  digitalWrite(L7, HIGH);
  digitalWrite(L8, LOW);
  digitalWrite(L9, HIGH);
  digitalWrite(L10, LOW);
}


void blinkAll()           //blink all LEDs once
{
  allOFF();
  allON();
  delay(500);
  allOFF();
  delay(500);
}


void roundRobin()           //just for fun
{
  digitalWrite(L1, HIGH);
  delay(100);
  digitalWrite(L2, HIGH);
  delay(100);
  digitalWrite(L3, HIGH);
  digitalWrite(L1, LOW);
  delay(100);
  digitalWrite(L4, HIGH);
  digitalWrite(L2, LOW);
  delay(100);
  digitalWrite(L5, HIGH);
  digitalWrite(L3, LOW);
  delay(100);
  digitalWrite(L6, HIGH);
  digitalWrite(L4, LOW);
  delay(100);
  digitalWrite(L7, HIGH);
  digitalWrite(L5, LOW);
  delay(100);
  digitalWrite(L8, HIGH);
  digitalWrite(L6, LOW);
  delay(100);
  digitalWrite(L9, HIGH);
  digitalWrite(L7, LOW);
  delay(100);
  digitalWrite(L10, HIGH);
  digitalWrite(L8, LOW);
  delay(100);
  digitalWrite(L9, LOW);
  delay(100);
  digitalWrite(L10, LOW);
}


void oneTarget(int target)           //in case compass direction (azimuth) is in range of just one LED
{
  digitalWrite(target, HIGH);
  delay(300);
  digitalWrite(target, LOW);
  delay(300);
  digitalWrite(target, HIGH);
  delay(300);
  digitalWrite(target, LOW);
  delay(300);
  digitalWrite(target, HIGH);
  delay(300);
  digitalWrite(target, LOW);
  delay(300);
  digitalWrite(target, HIGH);
  digitalWrite(target, LOW);
  delay(300);
  digitalWrite(target, HIGH);
}


void twoTarget(int target1, int target2)           //n case compass direction (azimuth) is in range of two LEDs
{
  digitalWrite(target1, HIGH);
  digitalWrite(target2, HIGH);
  delay(300);
  digitalWrite(target1, LOW);
  digitalWrite(target2, LOW);
  delay(300);
  digitalWrite(target1, HIGH);
  digitalWrite(target2, HIGH);
  delay(300);
  digitalWrite(target1, LOW);
  digitalWrite(target2, LOW);
  delay(300);
  digitalWrite(target1, HIGH);
  digitalWrite(target2, HIGH);
  delay(300);
  digitalWrite(target1, LOW);
  digitalWrite(target2, LOW);
  delay(300);
  digitalWrite(target1, HIGH);
  digitalWrite(target2, HIGH);
  digitalWrite(target1, LOW);
  digitalWrite(target2, LOW);
  delay(300);
  digitalWrite(target1, HIGH);
  digitalWrite(target2, HIGH);
  delay(300);
}


void displayDirection(float compass)           //implements oneTarget and twoTarget based on compass direction (azimuth)
{
  if (compass > 351 || compass < 9)
  {
    oneTarget(L1);
  }
  else if (compass >= 9 && compass <= 27)
  {
    twoTarget(L1, L2);
  }
  else if (compass > 27 && compass < 45)
  {
    oneTarget(L2);
  }
  else if (compass >= 45 && compass <= 63)
  {
    twoTarget(L2, L3);
  }
  else if (compass > 63 && compass < 81)
  {
    oneTarget(L3);
  }
  else if (compass >= 81 && compass <= 99)
  {
    twoTarget(L3, L4);
  }
  else if (compass > 99 && compass < 117)
  {
    oneTarget(L4);
  }
  else if (compass >= 117 && compass <= 135)
  {
    twoTarget(L4, L5);
  }
  else if (compass > 135 && compass < 153)
  {
    oneTarget(L5);
  }
  else if (compass >= 153 && compass <= 171)
  {
    twoTarget(L5, L6);
  }
  else if (compass > 171 && compass < 189)
  {
    oneTarget(L6);
  }
  else if (compass >= 189 && compass <= 207)
  {
    twoTarget(L6, L7);
  }
  else if (compass > 207 && compass < 225)
  {
    oneTarget(L7);
  }
  else if (compass >= 225 && compass <= 243)
  {
    twoTarget(L7, L8);
  }
  else if (compass > 243 && compass < 261)
  {
    oneTarget(L8);
  }
  else if (compass >= 261 && compass <= 279)
  {
    twoTarget(L8, L9);
  }
  else if (compass > 279 && compass < 297)
  {
    oneTarget(L9);
  }
  else if (compass >= 297 && compass <= 315)
  {
    twoTarget(L9, L10);
  }
  else if (compass > 315 && compass < 333)
  {
    oneTarget(L10);
  }
  else if (compass >= 333 && compass <= 351)
  {
    twoTarget(L10, L1);
  }
}
